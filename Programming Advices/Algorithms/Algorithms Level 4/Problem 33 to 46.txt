#pragma warning(disable : 4996)

#include <iostream>
#include <iomanip> 
#include <ctime>
using namespace std;

struct stDate
{
    short Day;
    short Month;
    short Year; 
};

stDate GetSystemDate()
{
    time_t t = time(0); 
    tm* now = localtime(&t); 

    stDate Current; 
    Current.Day = now->tm_mday;
    Current.Month = now->tm_mon + 1; 
    Current.Year = now->tm_year + 1900; 

    return Current; 
}

int ReadNumber(string Message) 
{
    int Num;
    cout << Message;
    cin >> Num;
    return Num;
}
 
bool isItLeapYear(int Year)
{
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

short NumberOFDaysInaMonth(int Year, short Month)
{
    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    // Days of 31 = { 1 , 3 , 5 , 7 , 8 ,10 , 12 }
    // Days of 30 = { 4 , 6 , 9 , 11}


    return ((Month == 2) ? (isItLeapYear(Year) ? 29 : 28) : (((Month <= 7 && Month % 2 == 1)) || ((Month > 7 && Month % 2 == 0)) ? 31 : 30));

}

stDate ReadDate()
{ 
     stDate Date;  
     Date.Day = ReadNumber("Please Enter a Day? ");  
     Date.Month = ReadNumber("\nPlease Enter a Month? ");   
     Date.Year = ReadNumber("\nPlease enter a year? ");  
     cout << "\n" << endl;  
    return Date;   
}    

bool isitLastDayInMonth(stDate Date)   
{
    return (Date.Day == NumberOFDaysInaMonth(Date.Year,Date.Month)); 
}

bool isLastMonthInYear(short Month)
{
    return (Month == 12); 
}

stDate DecreaseDateByOneDay(stDate Date)
{
    

    if (Date.Day == 1 && Date.Month == 1) 
    {
        Date.Day = 31;
        Date.Month = 12; 
        Date.Year--;
    }
    else if (Date.Day == 1)
    {
        Date.Month--;
        Date.Day = NumberOFDaysInaMonth(Date.Year, Date.Month); 
    }
    else
    {
        Date.Day--; 
    }
   

    return Date;
}
    
stDate DecreaseDateByXDay(stDate Date, short numOfDays)
{

    for (short i = 0; i < numOfDays; i++)
    {
        Date = DecreaseDateByOneDay(Date); 
    }

    return Date;
}

stDate DecreaseDateByOneWeek(stDate Date)
{
    for (short i = 1; i <= 7; i++)
    {
        Date = DecreaseDateByOneDay(Date); 
    }


    return Date;  
}

stDate DecreaseDateByXWeeks(stDate Date, short numOfWeeks)
{
    for (short i = 1; i <= numOfWeeks; i++)
    {
        Date = DecreaseDateByOneWeek(Date);
    }
    return Date;  
}

stDate DecreaseDateByOneMonth(stDate Date)
{
    if (Date.Month == 1)
    {
        Date.Month = 12;
        Date.Year--;
    }
    else
    {
        Date.Month--;
    }

    short CurrentDaysInAmonth = NumberOFDaysInaMonth(Date.Year, Date.Month);  

    if (Date.Day > CurrentDaysInAmonth)
    {
        Date.Day = CurrentDaysInAmonth;   
    }

    return Date;  
}

stDate DecreaseDateByXMonth(stDate Date, short numOfMonths)
{
    for (short i = 1; i <= numOfMonths; i++)
    {
        Date = DecreaseDateByOneMonth(Date); 
    }


    return Date;   
}

stDate DecreaseDateByOneYear(stDate Date)
{
    if (isItLeapYear(Date.Year) && isitLastDayInMonth(Date) && Date.Month == 2) 
    { 
        Date.Day--; 
    }

    Date.Year--;  

    return Date; 
} 

stDate DecreaseDateByXYear(stDate Date, short numOfYears)
{
  

    for (short i = 1; i <= numOfYears; i++)
    {
        Date = DecreaseDateByOneYear(Date); 
    }

    return Date;    
}

stDate DecreaseDateByXYearFaster(stDate Date, short numOfYears)    
{
    bool removeExtraDay = false; 

    if (isItLeapYear(Date.Year) && isitLastDayInMonth(Date) && Date.Month == 2 && numOfYears%4 != 0)
    {
        removeExtraDay = true; 
    }
    
    Date.Year = Date.Year - numOfYears;   

    if (removeExtraDay)
    {
        Date.Day--; 
    }

    return Date; 
}

stDate DecreaseDateByOneDecade(stDate Date) 
{
   
     Date = DecreaseDateByXYearFaster(Date,10);  
    

    return Date;    
}

stDate DecreaseDateByXDecade(stDate Date, short numOfDecades) 
{
   
     Date = DecreaseDateByXYearFaster(Date, numOfDecades*10);
  

    return Date;
}

stDate DecreaseDateByXDecadeFaster(stDate Date, short numOfDecades) 
{
    bool removeExtraDay = false;

    if (isItLeapYear(Date.Year) && isitLastDayInMonth(Date) && Date.Month == 2 && numOfDecades*10 % 4 != 0) 
    {
        removeExtraDay = true;
    }

    Date.Year = Date.Year - numOfDecades*10; 

    if (removeExtraDay)
    {
        Date.Day--;
    }

    return Date;   
}

stDate DecreaseDateByOneCentury(stDate Date)
{

    Date = DecreaseDateByXDecadeFaster(Date, 10); 

    return Date; 
}

stDate DecreaseDateByOneMillenuim(stDate Date)
{
    for (short i = 1; i <= 10; i++)
    {
        Date = DecreaseDateByOneCentury(Date);
    }

    return Date; 
}

int main() { 



    stDate Date1 = ReadDate();
 
    cout << "\nDate After:\n" << endl;

    Date1 = DecreaseDateByOneDay(Date1);    
        cout << "01-Subtracting one day is: "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;  
     
    Date1 = DecreaseDateByXDay(Date1,10);   
        cout << "02-Subtracting 10 days is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByOneWeek(Date1);
        cout << "03-Subtracting one week is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByXWeeks(Date1, 10);
        cout << "04-Subtracting 10 weeks is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByOneMonth(Date1); 
        cout << "05-Subtracting one month is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByXMonth(Date1,5);
        cout << "06-Subtracting 5 months is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByOneYear(Date1);
        cout << "07-Subtracting one year is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByXYear(Date1,10);
        cout << "08-Subtracting 10 years is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByXYearFaster(Date1, 10);
    cout << "09-Subtracting 10 years (faster): "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByOneDecade(Date1);  
    cout << "10-Subtracting one decade: "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl; 

    Date1 = DecreaseDateByXDecade(Date1,10); 
    cout << "11-Subtracting 10 decades: "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByXDecadeFaster(Date1, 10); 
    cout << "12-Subtracting 10 decades (faster): "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByOneCentury(Date1); 
    cout << "13-Subtracting One Century : "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = DecreaseDateByOneMillenuim(Date1); 
    cout << "14-Subtracting One Millenuim : "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl; 


    return 0;
}

