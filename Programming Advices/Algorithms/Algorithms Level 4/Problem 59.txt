// ProgrammingAdvices.com Â© Copyright 2022 Problem # 59/4 Solution Using C++

#include <iostream>
#include <iomanip>  
#include <ctime>
using namespace std; 

struct stDate {
    short Year;
    short Month;
    short Day;
};

struct stPeriod {
    stDate StartDate;
    stDate EndDate;
};

bool IsDate1BeforeDate2(stDate Date1, stDate Date2) {
    return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool IsDate1EqualDate2(stDate Date1, stDate Date2) {
    return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;
}

bool IsDate1AfterDate2(stDate Date1, stDate Date2) {
    return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualDate2(Date1, Date2));
}

enum enDateCompare { Before = -1, Equal = 0, After = 1 };

enDateCompare CompareDates(stDate Date1, stDate Date2) {
    if (IsDate1BeforeDate2(Date1, Date2))
        return enDateCompare::Before;
    if (IsDate1EqualDate2(Date1, Date2))
        return enDateCompare::Equal;
    // if (IsDate1AfterDate2(Date1,Date2))
    //     return enDateCompare::After; // this is faster
    return enDateCompare::After;
}

bool IsOverlapPeriods(stPeriod Period1, stPeriod Period2) {
    if (
        CompareDates(Period2.EndDate, Period1.StartDate) == enDateCompare::Before ||
        CompareDates(Period2.StartDate, Period1.EndDate) == enDateCompare::After
        )
        return false;
    else
        return true;
}

short ReadDay() {
    short Day;
    cout << "\nPlease enter a Day? ";  
    cin >> Day;
    return Day;
}

short ReadMonth() {
    short Month;
    cout << "Please enter a Month? ";
    cin >> Month;
    return Month;
}

short ReadYear() {
    short Year;
    cout << "Please enter a Year? ";
    cin >> Year;
    return Year;
}

stDate ReadFullDate() {
    stDate Date;
    Date.Day = ReadDay();
    Date.Month = ReadMonth();
    Date.Year = ReadYear();
    return Date;
}

stPeriod ReadPeriod() {
    stPeriod Period;
    cout << "\nEnter Start Date:\n";
    Period.StartDate = ReadFullDate();
    cout << "\nEnter End Date:\n";
    Period.EndDate = ReadFullDate();
    return Period;
}

bool isItLeapYear(int Year)
{
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0); 
} 
 
short NumberOFDaysInaMonth(int Year, short Month)
{
    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    // Days of 31 = { 1 , 3 , 5 , 7 , 8 ,10 , 12 }
    // Days of 30 = { 4 , 6 , 9 , 11}


    return ((Month == 2) ? (isItLeapYear(Year) ? 29 : 28) : (((Month <= 7 && Month % 2 == 1)) || ((Month > 7 && Month % 2 == 0)) ? 31 : 30));

}
 
bool isitLastDayInMonth(stDate Date)
{
    return (Date.Day == NumberOFDaysInaMonth(Date.Year, Date.Month));
}

bool isLastMonthInYear(short Month)
{
    return (Month == 12);
}

stDate IncreaseDateByOneDay(stDate Date)
{
    if (isitLastDayInMonth(Date) && isLastMonthInYear(Date.Month))
    {
        Date.Day = 1;
        Date.Month = 1;
        Date.Year++;
    }
    else if (isitLastDayInMonth(Date))
    {
        Date.Day = 1;
        Date.Month++;
    }
    else
    {
        Date.Day++;
    }

    return Date;
}

void  SwapDates(stDate& Date1, stDate& Date2)
{
    stDate TempDate;
    TempDate.Year = Date1.Year;
    TempDate.Month = Date1.Month;
    TempDate.Day = Date1.Day;

    Date1.Year = Date2.Year;
    Date1.Month = Date2.Month;
    Date1.Day = Date2.Day;


    Date2.Year = TempDate.Year;
    Date2.Month = TempDate.Month;
    Date2.Day = TempDate.Day;
}

int GetDifferenceInDays(stDate Date1, stDate Date2, bool IncludeEndDay = false)
{
    int Days = 0;
    short SawpFlagValue = 1;

    if (!IsDate1BeforeDate2(Date1, Date2))
    {
        SwapDates(Date1, Date2);
        SawpFlagValue = -1;
    }
    while (IsDate1BeforeDate2(Date1, Date2))
    {
        Days++;
        Date1 = IncreaseDateByOneDay(Date1);
    }
    return IncludeEndDay ? ++Days * SawpFlagValue : Days * SawpFlagValue;
}

int CacalutePeriodLength(stPeriod Period, bool IncludeEndDay = false)
{
    return GetDifferenceInDays(Period.StartDate, Period.EndDate,IncludeEndDay); 
}

int main() {
    cout << "\nEnter Period 1:";
    stPeriod Period1 = ReadPeriod(); 
  
    cout << "\nPeriod Length is: " << CacalutePeriodLength(Period1) << endl;   
    cout << "Period Length is (Including EndDate): " << CacalutePeriodLength(Period1,true) <<  endl;

    system("pause>0");

    return 0;
}



