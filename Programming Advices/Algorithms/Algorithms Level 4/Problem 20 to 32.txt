#pragma warning(disable : 4996)

#include <iostream>
#include <iomanip> 
#include <ctime>
using namespace std;

struct stDate
{
    short Day;
    short Month;
    short Year; 
};

stDate GetSystemDate()
{
    time_t t = time(0); 
    tm* now = localtime(&t); 

    stDate Current; 
    Current.Day = now->tm_mday;
    Current.Month = now->tm_mon + 1; 
    Current.Year = now->tm_year + 1900; 

    return Current; 
}

int ReadNumber(string Message) 
{
    int Num;
    cout << Message;
    cin >> Num;
    return Num;
}
 
bool isItLeapYear(int Year)
{
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

short NumberOFDaysInaMonth(int Year, short Month)
{
    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    // Days of 31 = { 1 , 3 , 5 , 7 , 8 ,10 , 12 }
    // Days of 30 = { 4 , 6 , 9 , 11}


    return ((Month == 2) ? (isItLeapYear(Year) ? 29 : 28) : (((Month <= 7 && Month % 2 == 1)) || ((Month > 7 && Month % 2 == 0)) ? 31 : 30));

}

stDate ReadDate()
{ 
     stDate Date;  
     Date.Day = ReadNumber("Please Enter a Day? ");  
     Date.Month = ReadNumber("\nPlease Enter a Month? ");   
     Date.Year = ReadNumber("\nPlease enter a year? ");  
     cout << "\n" << endl;  
    return Date;   
}    

bool isitLastDayInMonth(stDate Date)   
{
    return (Date.Day == NumberOFDaysInaMonth(Date.Year,Date.Month)); 
}

bool isLastMonthInYear(short Month)
{
    return (Month == 12); 
}

stDate IncreaseDateByOneDay(stDate Date)
{
    if (isitLastDayInMonth(Date) && isLastMonthInYear(Date.Month))
    {
        Date.Day = 1;
        Date.Month = 1;
        Date.Year++;
    }
    else if (isitLastDayInMonth(Date))
    {
        Date.Day = 1;
        Date.Month++;
    }
    else
    {
        Date.Day++;
    }

    return Date;
}
    
stDate IncreaseDateByXDay(stDate Date, short numOfDays)
{

    for (short i = 0; i < numOfDays; i++)
    {
        Date = IncreaseDateByOneDay(Date); 
    }

    return Date;
}

stDate IncreaseDateByOneWeek(stDate Date)
{
    for (short i = 1; i <= 7; i++)
    {
        Date = IncreaseDateByOneDay(Date); 
    }


    return Date;  
}

stDate IncreaseDateByXWeeks(stDate Date, short numOfWeeks)
{
    for (short i = 1; i <= numOfWeeks; i++)
    {
        Date = IncreaseDateByOneWeek(Date);
    }
    return Date;  
}

stDate IncreaseDateByOneMonth(stDate Date)
{
    if (Date.Month == 12)
    {
        Date.Month = 1;
        Date.Year++;
    }
    else
    {
        Date.Month++;
    }

    short CurrentDaysInAmonth = NumberOFDaysInaMonth(Date.Year, Date.Month);  

    if (Date.Day > CurrentDaysInAmonth)
    {
        Date.Day = CurrentDaysInAmonth;   
    }

    return Date;  
}

stDate IncreaseDateByXMonth(stDate Date, short numOfMonths)
{
    for (short i = 1; i <= numOfMonths; i++)
    {
        Date = IncreaseDateByOneMonth(Date); 
    }


    return Date;   
}

stDate IncreaseDateByOneYear(stDate Date)
{
    if (isItLeapYear(Date.Year) && isitLastDayInMonth(Date) && Date.Month == 2) 
    { 
        Date.Day--; 
    }

    Date.Year++;  

    return Date; 
} 

stDate IncreaseDateByXYear(stDate Date, short numOfYears)
{
  

    for (short i = 1; i <= numOfYears; i++)
    {
        Date = IncreaseDateByOneYear(Date); 
    }

    return Date;    
}

stDate IncreaseDateByXYearFaster(stDate Date, short numOfYears)    
{
    bool removeExtraDay = false; 

    if (isItLeapYear(Date.Year) && isitLastDayInMonth(Date) && Date.Month == 2 && numOfYears%4 != 0)
    {
        removeExtraDay = true; 
    }
    
    Date.Year = Date.Year + numOfYears;   

    if (removeExtraDay)
    {
        Date.Day--; 
    }

    return Date; 
}

stDate IncreaseDateByOneDecade(stDate Date) 
{
   
     Date = IncreaseDateByXYearFaster(Date,10);  
    

    return Date;    
}

stDate IncreaseDateByXDecade(stDate Date, short numOfDecades) 
{
   
     Date = IncreaseDateByXYearFaster(Date, numOfDecades*10);
  

    return Date;
}

stDate IncreaseDateByXDecadeFaster(stDate Date, short numOfDecades) 
{
    bool removeExtraDay = false;

    if (isItLeapYear(Date.Year) && isitLastDayInMonth(Date) && Date.Month == 2 && numOfDecades*10 % 4 != 0) 
    {
        removeExtraDay = true;
    }

    Date.Year = Date.Year + numOfDecades*10;

    if (removeExtraDay)
    {
        Date.Day--;
    }

    return Date;   
}

stDate IncreaseDateByOneCentury(stDate Date)
{

    Date = IncreaseDateByXDecadeFaster(Date, 10); 

    return Date; 
}

stDate IncreaseDateByOneMillenuim(stDate Date)
{
    for (short i = 1; i <= 10; i++)
    {
        Date = IncreaseDateByOneCentury(Date);
    }

    return Date; 
}

int main() { 



    stDate Date1 = ReadDate();
 
    cout << "\nDate After:\n" << endl;

    Date1 = IncreaseDateByOneDay(Date1);    
        cout << "01-Adding one day is: "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;  
     
    Date1 = IncreaseDateByXDay(Date1,10);   
        cout << "02-Adding 10 days is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByOneWeek(Date1);
        cout << "03-Adding one week is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByXWeeks(Date1, 10);
        cout << "04-Adding 10 weeks is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByOneMonth(Date1); 
        cout << "05-Adding one month is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByXMonth(Date1,5);
        cout << "06-Adding 5 months is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByOneYear(Date1);
        cout << "07-Adding one year is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByXYear(Date1,10);
        cout << "08-Adding 10 years is: "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByXYearFaster(Date1, 10);
    cout << "09-Adding 10 years (faster): "
            << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByOneDecade(Date1);  
    cout << "10-Adding one decade: "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl; 

    Date1 = IncreaseDateByXDecade(Date1,10); 
    cout << "11-Adding 10 decades: "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByXDecadeFaster(Date1, 10); 
    cout << "12-Adding 10 decades (faster): "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByOneCentury(Date1); 
    cout << "13-Adding One Century : "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl;

    Date1 = IncreaseDateByOneMillenuim(Date1); 
    cout << "14-Adding One Millenuim : "
        << Date1.Day << "/" << Date1.Month << "/" << Date1.Year << endl; 


    return 0;
}

