My Solution :

#include <iostream>
#include <iomanip> 
using namespace std;

struct sDate
{
    short Day;
    short Month;
    short Year; 
};

int ReadNumber(string Message)
{
    int Num;   
    cout << Message; 
    cin >> Num; 
    return Num;
}

bool isItLeapYear(int Year)
{
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

short NumberOFDaysInaMonth(int Year, short Month)
{
    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    // Days of 31 = { 1 , 3 , 5 , 7 , 8 ,10 , 12 }
    // Days of 30 = { 4 , 6 , 9 , 11}


    return ((Month == 2) ? (isItLeapYear(Year) ? 29 : 28) : (((Month <= 7 && Month % 2 == 1)) || ((Month > 7 && Month % 2 == 0)) ? 31 : 30));

}

short DayOfTheWeekOrder(int Year, short Month, short Day)
{
    short a = floor((14 - Month) / 12);  
    short y = Year - a;
    short m = Month + 12 * a - 2;    
    return ((Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12))) % 7; 
}

string DayName(short DayOfTheWeekOrder)
{
    string DayOfWeek[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

    return DayOfWeek[DayOfTheWeekOrder];
}

string FindMonth(short Month)
{
    string NameOfMonths[12] = { "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun", 
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec" };
    return NameOfMonths[Month - 1]; 
}

int NumberOfTheDaysSniceBeginngOfTheYear(int Year, short Month, short Day) 
{
    int daycount = 0;

    for (short i = 1; i < Month; i++)
    {
        daycount += NumberOFDaysInaMonth(Year, i);
    }

    daycount += Day;

    return daycount;
}

sDate GetDateFromDayOrderInYear(short DayInTheYear, short Year)
{
    sDate Date;
    short Rem = DayInTheYear;
    short MonthDays = 0;

    Date.Year = Year;
    Date.Month = 1;

    while (true)
    {
        MonthDays = NumberOFDaysInaMonth(Year, Date.Month);
        if (Rem > MonthDays)
        {
            Rem -= MonthDays;
            Date.Month++;
        }
        else
        {
            Date.Day = Rem;
            break;
        }
    }
    return Date;
}

sDate FindDateAfterAddedDays(int AddedDays , short Year, short Month, short Day)  
{
    sDate Date;
    Date.Year = Year;  
    Date.Month = Month;
    Date.Day = Day; 
   // short daysuntilNewYear = NumberOfTheDaysSniceBeginngOfTheYear(Year, Month, Day);   

    while (AddedDays >= (isItLeapYear(Date.Year) ? 366 : 365)) 
    {
        AddedDays -= isItLeapYear(Date.Year) ? 366 : 365;   
        Date.Year++; 
    } 

    while (AddedDays >= NumberOFDaysInaMonth(Date.Year, Date.Month))   
    {
        AddedDays -= NumberOFDaysInaMonth(Date.Year, Date.Month);  

        if (Date.Month == 12) 
        {
            Date.Month = 1;  
            Date.Year++; 
        }
        else
        {
           Date.Month++;
        }
    }
    if ((AddedDays + Day) >= NumberOFDaysInaMonth(Date.Year, Date.Month))
    {
        Date.Month++;      
        Date.Day = AddedDays - (NumberOFDaysInaMonth(Date.Year, Date.Month - 1) - Date.Day); 
    }
    else {
        Date.Day = AddedDays;
    }
    return Date;    

}

// 1) More than 365 or 366
// 2) Less than a 365 or 366 but enters new year
// 3) stays in the same year 



int main() {


        short Day = ReadNumber("Please Enter a Day? ");
        short Month = ReadNumber("\nPlease Enter a Month? "); 
        int Year = ReadNumber("\nPlease enter a year? ");
        int AddedDays = ReadNumber("\nHow many days do you want to add? ");


        sDate Date;  
        Date = FindDateAfterAddedDays(AddedDays, Year,Month,Day);     
        cout << "\nDate after adding [" << AddedDays << "] is: ";  
        cout << Date.Day << "/" << Date.Month << "/" << Date.Year << endl; 
       

       

    return 0;
}

------------------------------------------------------------
teacher solution: 


#include <iostream>
#include <iomanip> 
using namespace std;

struct sDate
{
    short Day;
    short Month;
    short Year; 
};

int ReadNumber(string Message)
{
    int Num;   
    cout << Message; 
    cin >> Num; 
    return Num;
}

bool isItLeapYear(int Year)
{
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

short NumberOFDaysInaMonth(int Year, short Month)
{
    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    // Days of 31 = { 1 , 3 , 5 , 7 , 8 ,10 , 12 }
    // Days of 30 = { 4 , 6 , 9 , 11}


    return ((Month == 2) ? (isItLeapYear(Year) ? 29 : 28) : (((Month <= 7 && Month % 2 == 1)) || ((Month > 7 && Month % 2 == 0)) ? 31 : 30));

}

short DayOfTheWeekOrder(int Year, short Month, short Day)
{
    short a = floor((14 - Month) / 12);  
    short y = Year - a;
    short m = Month + 12 * a - 2;    
    return ((Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12))) % 7; 
}

string DayName(short DayOfTheWeekOrder)
{
    string DayOfWeek[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

    return DayOfWeek[DayOfTheWeekOrder];
}

string FindMonth(short Month)
{
    string NameOfMonths[12] = { "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun", 
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec" };
    return NameOfMonths[Month - 1]; 
}

int NumberOfTheDaysSniceBeginngOfTheYear(int Year, short Month, short Day) 
{
    int daycount = 0;

    for (short i = 1; i < Month; i++)
    {
        daycount += NumberOFDaysInaMonth(Year, i);
    }

    daycount += Day;

    return daycount;
}

sDate FindDateAfterAddedDays(int AddedDays , sDate Date)      
{
    
    short RemaningDays = AddedDays + NumberOfTheDaysSniceBeginngOfTheYear(Date.Year, Date.Month, Date.Day);
    short MonthDays = 0;

    Date.Month = 1; 

    while (true)
    {
        MonthDays = NumberOFDaysInaMonth(Date.Year, Date.Month);   
        if (RemaningDays > MonthDays)
        {
            RemaningDays -= MonthDays;  
            Date.Month++; 

            if (Date.Month > 12)  
            {
                Date.Month = 1;
                Date.Year++; 
            }
        }
        else
        {

            Date.Day = RemaningDays;  
            break;
        }

    }

    return Date;    

}

sDate ReadDate()
{
    sDate Date;  
     Date.Day = ReadNumber("Please Enter a Day? ");  
     Date.Month = ReadNumber("\nPlease Enter a Month? ");   
     Date.Year = ReadNumber("\nPlease enter a year? ");   
    return Date;   
} 


int main() {


        sDate Date = ReadDate(); 
        int AddedDays = ReadNumber("\nHow many days do you want to add? ");    


    
        Date = FindDateAfterAddedDays(AddedDays, Date);   
        cout << "\nDate after adding [" << AddedDays << "] is: ";    
        cout << Date.Day << "/" << Date.Month << "/" << Date.Year << endl; 
       

       

    return 0;
}