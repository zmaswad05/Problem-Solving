My Solution 
-------------------------------------------------------------------------------------------------
#include <iostream>
#include <cstdlib>
using namespace std;

enum enQustionLevel { Easy = 1, Med = 2, Hard = 3, QuestionMix = 4 };

enum enOpType { Add = 1, Sub = 2, Multi = 3, Divison = 4 , OpMix = 5 };

struct stRoundQuestion
{
	int Answer; 
	int Num1; 
	int Num2; 
	char OpType; 
	bool isCorrect;
	int CorrAnswer;
};

struct stGameInfo
{
	short NumofQuestons;
	enQustionLevel QustionLevel;  
	enOpType OpType; 
};

struct stGameStatics
{
	short NumOfQuestions;      
	string QustionLevel;
	string OpType; 
	short NumOfRightAns;
	short NumOfWrongAns; 
};

int RandomNumber(int From, int To)      
{
	// Function to generate a random number
	int randNum = rand() % (To - From + 1) + From; 
	return randNum; 
} 

int ReadPostiveNumber(string Message)
{
	int Num; 
	do {
		cout << Message << endl;
		cin >> Num;
	} while (Num <= 0);
	return Num;
}

stGameInfo ReadGameInfo()
{    
	stGameInfo GameInfo; 

	GameInfo.NumofQuestons = ReadPostiveNumber("How Many Questions Do You want to answer? ");
	GameInfo.QustionLevel = enQustionLevel(ReadPostiveNumber("Enter Questions Level [1] Easy , [2] Med , [3] Hard , [4] Mix ? ")); 
	GameInfo.OpType = enOpType(ReadPostiveNumber("Enter Operation Type [1] Add , [2] Sub , [3] Multiplay , [4] Divsion , [5] Mix ? ")); 
	return GameInfo;       
} 

int GetNumber(enQustionLevel QL)     
{
	int Num = 0;  
	switch (QL)
	{
	case enQustionLevel::Easy:
		Num = RandomNumber(1, 10);
		break;
	case enQustionLevel::Med:
		Num = RandomNumber(10, 100);
		break;
	case enQustionLevel::Hard:
		Num = RandomNumber(100, 1000);   
		break;
	case enQustionLevel::QuestionMix:   
		Num = RandomNumber(1, 1000); 
		break;   
	}
	return Num;      
}

char RadnomOptType(enOpType OpT)     
{
	char OpTc[4] = { '+', '-', 'x', '/' };
	short num = RandomNumber(1, 4);  
	return OpTc[4 - num];   
}

char OpType( enOpType OpT )   
{
	
	switch (OpT) 
	{
	case enOpType::Add: 
		return '+'; 
	case enOpType::Sub:           
		return '-';
	case enOpType::Multi:  
		return 'x';
	case enOpType::Divison:   
		return '/';
	case enOpType::OpMix:
		return RadnomOptType(enOpType::OpMix);
	default: 
		return '?';  
	}
}

int PrintQuestion(stRoundQuestion RoundInfo)    
{
	int Answer = 0; 
	cout << RoundInfo.Num1  << " " << RoundInfo.OpType << " " << RoundInfo.Num2 << " = ";
	cin >> Answer ;    
	cout << "\n___________________" << endl;
	return Answer;  
}   

int CorrAnswer(stRoundQuestion &RoundInfo)
{
	int actualAnswer = 0;
	switch (RoundInfo.OpType)
	{
	case '+':
		actualAnswer = RoundInfo.Num1 + RoundInfo.Num2;
		break;
	case '-':
		actualAnswer = RoundInfo.Num1 - RoundInfo.Num2;
		break;
	case 'x':
		actualAnswer = RoundInfo.Num1 * RoundInfo.Num2;
		break;
	case '/':
		actualAnswer = RoundInfo.Num1 / RoundInfo.Num2;
		break;
	}
	return actualAnswer;    
}

bool isAnsweCorrect(stRoundQuestion RoundInfo)
{
	
	int actualAnswer = 0;

	switch (RoundInfo.OpType)
	{
	case '+':
		actualAnswer = RoundInfo.Num1 + RoundInfo.Num2;
		break;
	case '-':
		actualAnswer = RoundInfo.Num1 - RoundInfo.Num2;
		break;
	case 'x':
		actualAnswer = RoundInfo.Num1 * RoundInfo.Num2;
		break;
	case '/':
		actualAnswer = RoundInfo.Num1 / RoundInfo.Num2;
		break;
	}

	return actualAnswer == RoundInfo.Answer;      
}

void PrintQuestionResult(stRoundQuestion RoundInfo)   
{
	if (RoundInfo.isCorrect) 
	{
		cout << "Right Answer :-)\n\n" << endl; 
		system("color 2F"); //turn screen to Green  
	}
	else
	{
		cout << "Wrong Answer :-(" << endl;
		cout << "The Right Answer is: " << RoundInfo.CorrAnswer << "\n\n" << endl;
		system("color 4F"); //turn screen to Red 
		cout << "\a";
	}
}

string opType(enOpType type) 
{
	string OPTC[5] = {"Mix", "/", "x", "-", "+"};
	return OPTC[5 - type]; 
}

string Queslevel(enQustionLevel level) 
{ 
	string QL[4] = { "Mix", "Hard", "Med", "Easy" };  
	return QL[4 - level];    
}
 
stGameStatics FillFinalReslut(stGameInfo GameInfo, short CorrectAns , short WrongAns )
{
	stGameStatics GameResluts;
	GameResluts.NumOfQuestions = GameInfo.NumofQuestons;    
	GameResluts.NumOfRightAns = CorrectAns;  
	GameResluts.NumOfWrongAns = WrongAns;    
	GameResluts.OpType = opType(GameInfo.OpType);  
	GameResluts.QustionLevel = Queslevel(GameInfo.QustionLevel);  
	 
	return GameResluts;    
}
 
stGameStatics PlayGame(stGameInfo GameInfo)      
{
	stRoundQuestion RoundInfo; 
	short CorrectAns = 0, WrongAns = 0; 
	short Question;
	for ( Question = 1; Question <= GameInfo.NumofQuestons; Question++) 
	{
		cout << "\nQuestion [" << Question << "/" << GameInfo.NumofQuestons << "]" << endl;  
		RoundInfo.OpType = OpType(GameInfo.OpType);  
		RoundInfo.Num1 = GetNumber(GameInfo.QustionLevel);   
		RoundInfo.Num2 = GetNumber(GameInfo.QustionLevel); 
		RoundInfo.Answer = PrintQuestion(RoundInfo);
		RoundInfo.CorrAnswer = CorrAnswer(RoundInfo);  
		RoundInfo.isCorrect = isAnsweCorrect(RoundInfo);    
		
		 
		//Increase Correct/Wrong counters 
		if (RoundInfo.isCorrect)
			CorrectAns++; 
		else 
			WrongAns++;  

		PrintQuestionResult(RoundInfo); 
	}

	return FillFinalReslut(GameInfo , CorrectAns, WrongAns);
}

void FindFinalReslut(stGameStatics final) 
{
	if (final.NumOfRightAns >= final.NumOfWrongAns)
	{
		cout << "Pass :-)\n";   
		system("Color 2F");
	}
	else
	{
		cout << "Fail :-(\n";
		system("Color 4F");
		cout << "\a";
	}
}

void PrintReslutsofGame(stGameStatics GameResluts)   
{
	cout << "\n\n__________________________________\n" << endl;
	cout << "   Final Reslut is ";
	FindFinalReslut(GameResluts);  
	cout << "__________________________________\n" << endl;
	cout << "Number of Question: " << GameResluts.NumOfQuestions << endl;
	cout << "Questions Level   : " << GameResluts.QustionLevel << endl;
	cout << "Operation Type    : " << GameResluts.OpType << endl; 
	cout << "Number of Right Answers: " << GameResluts.NumOfRightAns << endl;
	cout << "Number of Wrong Answers: " << GameResluts.NumOfWrongAns << endl; 
	cout << "__________________________________\n" << endl;  
}  

void RestScreen() 
{
	system("cls");
	system("Color 0F");
}

void Start()
{
	char PlayAgain = '-';  
	do {
		RestScreen(); 
		stGameStatics GameStatics; 
		GameStatics = PlayGame(ReadGameInfo());  
		PrintReslutsofGame(GameStatics);    
		cout << endl <<  "Do you want to play again? Y/N? "; 
		cin >> PlayAgain; 
	} while (PlayAgain == 'Y' || PlayAgain == 'y');    
}

int main()
{
	srand((unsigned)time(NULL)); 

	Start();   

	return 0;
}

Teacher Solution
------------------------------------------------------------------------------------------------

#include<iostream>

using namespace std;

enum enQuestionsLevel { EasyLevel = 1, MedLevel = 2, HardLevel = 3, Mix = 4 };

enum enOperationType { Add = 1, Sub = 2, Mult = 3, Div = 4, MixOp = 5 };

string GetOpTypeSymbol(enOperationType OpType)
{
    switch (OpType)
    {
    case enOperationType::Add:
        return "+";
    case enOperationType::Sub:
        return "-";
    case enOperationType::Mult:
        return "x";
    case enOperationType::Div:
        return "/";
    default:
        return "Mix";
    }
}

string GetQuestionLevelText(enQuestionsLevel QuestionLevel)
{
    string arrQuestionLevelText[4] = { "Easy","Med","Hard","Mix"
    };
    return arrQuestionLevelText[QuestionLevel - 1];
}

int RandomNumber(int From, int To)
{
    //Function to generate a random number
    int randNum = rand() % (To - From + 1) + From;
    return randNum;
}

void SetScreenColor(bool Right)
{
    if (Right)
        system("color 2F"); //turn screen to Green
    else
    {
        system("color 4F"); //turn screen to Red
        cout << "\a";
    }
}

short ReadHowManyQuestions()
{
    short NumberOfQuestions;
    do
    {
        cout << "How Many Questions do you want to answer ? ";
        cin >> NumberOfQuestions;
    } while (NumberOfQuestions < 1 || NumberOfQuestions >10);
    return NumberOfQuestions;
}

enQuestionsLevel ReadQuestionsLevel()
{
    short QuestionLevel = 0;
    do
    {
        cout << "Enter Questions Level [1] Easy, [2] Med, [3] Hard, [4] Mix ? "; 
            cin >> QuestionLevel;
    } while (QuestionLevel < 1 || QuestionLevel >4);
    return (enQuestionsLevel)QuestionLevel;
}

enOperationType ReadOpType()
{
    short OpType;
    do
    {
        cout << "Enter Operation Type [1] Add, [2] Sub, [3] Mul, [4] Div, [5] Mix ? "; 
            cin >> OpType; 
    } while (OpType < 1 || OpType >5);
    return (enOperationType)OpType;
}

struct stQuestion
{
    int Number1 = 0;
    int Number2 = 0;
    enOperationType OperationType;
    enQuestionsLevel QuestionLevel;
    int CorrectAnswer = 0;
    int PlayerAnswer = 0;
    bool AnswerResult = false;
};

struct stQuizz
{
    stQuestion QuestionList[100];
    short NumberOfQuestions;
    enQuestionsLevel QuestionsLevel;
    enOperationType OpType;
    short NumberOfWrongAnswers = 0;
    short NumberOfRightAnswers = 0;
    bool isPass = false;
};

int SimpleCalculator(int Number1, int Number2, enOperationType OpType)
{
    switch (OpType)
    {
    case enOperationType::Add:
        return Number1 + Number2;
    case enOperationType::Sub:
        return Number1 - Number2;
    case enOperationType::Mult:
        return Number1 * Number2;
    case enOperationType::Div:
        return Number1 / Number2;
    default:
        return Number1 + Number2;
    }
}

enOperationType GetRandomOperationType()
{
    int Op = RandomNumber(1, 4);
    return (enOperationType)Op;
}

stQuestion GenerateQuestion(enQuestionsLevel QuestionLevel, enOperationType OpType)
{
    stQuestion Question;
    if (QuestionLevel == enQuestionsLevel::Mix)
    {
        QuestionLevel = (enQuestionsLevel)RandomNumber(1, 3);
    }
    if (OpType == enOperationType::MixOp)
    {
        OpType = GetRandomOperationType();
    }
    Question.OperationType = OpType;
    switch (QuestionLevel)
    {
    case enQuestionsLevel::EasyLevel:
        Question.Number1 = RandomNumber(1, 10);
        Question.Number2 = RandomNumber(1, 10);

        Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2,Question.OperationType);
        Question.QuestionLevel = QuestionLevel;
        return Question;
    case enQuestionsLevel::MedLevel:
        Question.Number1 = RandomNumber(10, 50);
        Question.Number2 = RandomNumber(10, 50);
        Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
        Question.QuestionLevel = QuestionLevel;
        return Question;

    case enQuestionsLevel::HardLevel:
        Question.Number1 = RandomNumber(50, 100);
        Question.Number2 = RandomNumber(50, 100);
        Question.CorrectAnswer =SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
        Question.QuestionLevel = QuestionLevel;
        return Question;
    }
    return Question;
}

void GenerateQuizzQuestions(stQuizz& Quizz)
{
    for (short Question = 0; Question < Quizz.NumberOfQuestions; Question++)
    {
        Quizz.QuestionList[Question] = GenerateQuestion(Quizz.QuestionsLevel, Quizz.OpType);
    }
}

int ReadQuestionAnswer()
{
    int Answer = 0;
    cin >> Answer;
    return Answer;
}

void PrintTheQuestion(stQuizz& Quizz, short QuestionNumber)
{
    cout << "\n";
    cout << "Question [" << QuestionNumber + 1 << "/" <<
        Quizz.NumberOfQuestions << "] \n\n";
    cout << Quizz.QuestionList[QuestionNumber].Number1 << endl;
    cout << Quizz.QuestionList[QuestionNumber].Number2 << " ";
    cout <<
        GetOpTypeSymbol(Quizz.QuestionList[QuestionNumber].OperationType);
    cout << "\n_________" << endl;
}

void CorrectTheQuestionAnswer(stQuizz& Quizz, short QuestionNumber)
{
    if (Quizz.QuestionList[QuestionNumber].PlayerAnswer !=
        Quizz.QuestionList[QuestionNumber].CorrectAnswer)
    {
        Quizz.QuestionList[QuestionNumber].AnswerResult = false;
        Quizz.NumberOfWrongAnswers++;
        cout << "Worng Answer :-( \n";
        cout << "The right answer is: ";
        cout << Quizz.QuestionList[QuestionNumber].CorrectAnswer;
        cout << "\n";
    }
    else
    {
        Quizz.QuestionList[QuestionNumber].AnswerResult = true;
        Quizz.NumberOfRightAnswers++;
        cout << "Right Answer :-) \n";
    }
    cout << endl;
    SetScreenColor(Quizz.QuestionList[QuestionNumber].AnswerResult);
}

void AskAndCorrectQuestionListAnswers(stQuizz& Quizz)
{
    for (short QuestionNumber = 0; QuestionNumber <
        Quizz.NumberOfQuestions; QuestionNumber++)
    {

        PrintTheQuestion(Quizz, QuestionNumber);
        Quizz.QuestionList[QuestionNumber].PlayerAnswer = ReadQuestionAnswer();
        CorrectTheQuestionAnswer(Quizz, QuestionNumber);
    }
    Quizz.isPass = (Quizz.NumberOfRightAnswers >=
        Quizz.NumberOfWrongAnswers);
}

string GetFinalResultsText(bool Pass)
{
    if (Pass)
        return "PASS :-)";
    else
        return "Fail :-(";
}

void PrintQuizzResults(stQuizz Quizz)
{
    cout << "\n";
    cout << "______________________________\n\n";
    cout << " Final Resutls is " <<
        GetFinalResultsText(Quizz.isPass);
    cout << "\n______________________________\n\n";
    cout << "Number of Questions: " << Quizz.NumberOfQuestions <<
        endl;
    cout << "Questions Level : " <<
        GetQuestionLevelText(Quizz.QuestionsLevel) << endl;
    cout << "OpType : " <<
        GetOpTypeSymbol(Quizz.OpType) << endl;
    cout << "Number of Right Answers: " <<
        Quizz.NumberOfRightAnswers << endl;
    cout << "Number of Wrong Answers: " <<
        Quizz.NumberOfWrongAnswers << endl;
    cout << "______________________________\n";
}

void PlayMathGame()
{
    stQuizz Quizz;
    Quizz.NumberOfQuestions = ReadHowManyQuestions();
    Quizz.QuestionsLevel = ReadQuestionsLevel();
    Quizz.OpType = ReadOpType();

    GenerateQuizzQuestions(Quizz);
    AskAndCorrectQuestionListAnswers(Quizz);
    PrintQuizzResults(Quizz);
}

void ResetScreen()  
{
    system("cls");
    system("color 0F");
}

void StartGame()
{
    char PlayAgain = 'Y';
    do
    {
        ResetScreen();
        PlayMathGame();
        cout << endl << "Do you want to play again? Y/N? ";
        cin >> PlayAgain;
    } while (PlayAgain == 'Y' || PlayAgain == 'y');
}

int main()
{
    //Seeds the random number generator in C++, called only once
    srand((unsigned)time(NULL));

    StartGame();
    return 0;
}




















              /*  MATH GAME  */
// 1) Ask the user How many questions he want to answer
// 2) Ask user about the level of the questoins 
// 3) Ask users about the Opertion type for questions
// 4) Start a loop then start asking him questions , if correct make screen color green
//  4.1 if no make it red color with bell sound
// 5) after he finish answering the questions , print GAME reuslts 
// 6) Ask user if he want to play agian 